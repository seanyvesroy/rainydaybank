Title: RainyDayBank Database and Website
Team Name: Broke College Boys
Class: 332 Databases
Date: 12/8/21
Team Members: Eulices, Daniel, Kevin, Sean




Introduction: For this assignment we were given the task of creating a database from scratch to fulfill the specified requirements of our client. We started by building an ER diagram, then took our ER diagram and converted it into a relational model. From the relational model we constructed a physical model for our database using MySQL. Once we built a physical model we used an online tool and some nifty PHP script (populateCustomer.php) to populate our database with dummy data to present to our client. Finally we used PHP and MySQL to create a fully functional Rainy Day Bank demo application.
Database Design Process: We were initially given twelve business rules which we used to create our initial ER diagram. Pulling the necessary information from the specified rules we created seven entities Our CUSTOMER_ACC, PRODUCT, and BANK_BRANCH were all strong entities whereas our COMPLAINT, TRANSACTION, PRODUCT_SUPPLIER, and PAYMENT_SCHED are weak entities. After creating our entities and relationships we moved on to our relational model. The transformation from ER diagram to relational model helped identify our Primary and Foreign keys and solidify the relationships between our entities. Next we took our relational model and translated it into MySQL. Creating all of the necessary tables and attributes specified in the relational model we created our physical model of the database. After ensuring all our constraints were specified it was time to import some data. To do this we wrote a php script (populateCustomer.php) to fill in our database with test data. 


Application Design: Next we made our generic php scripts to populate our demo application. 
We wrote Separate scripts for our header and footer in order to make our application appear 
consistent no matter what part of the application the user is in. We also wrote separate scripts for connecting to the database (sqlconnection.php) in order to make connecting on multiple scripts easier, and to create a small layer of security as well. We wrote scripts to create a backup (create_backup.php) and to back up specific tables as well (backup_table.php) in order to ensure no loss of data. In order to access the backup database we created one must simply put the following command in their terminal ('mysql -u root -p RainyDayBank < Backup_script.sql). This command will take the backup file created by clicking the backup table icon on our application (powered by our PHP script) and overwrite the current database stored on the computer being used. The next thing we had to do was create views that were specified by the client, including views to see which customers purchased certain products. The first view (views.php) finds the names and phone numbers of all customers who have not purchased the reversed mortgage product offered so our customers can inform them of this specific product. Using PHP script we access the view created in the database to display these names on the demo application. Next we created a view showing the names of all members who purchased the the Mega 401k product. Again we used PHP script to access and display the results of the view we wrote in the database (views.sql) on our application. Our next view again located in (views.sql) displays the product names and types of products that have sold more than 50 units. We used the aggregate function count to calculate this total. The last view takes the previous view and adjusts it to display products that sold more than 50 units with an initial value greater than 1000 dollars. We use the same aggregate function count in here to calculate this as well. Last we had to create a trigger on products to show any time a product sells more than 250 units. When this happens we add a new entry to our external offers table in order for other product suppliers to see. We use the aggregate function count again to count when sales reach over 250. (trigger.sql). We next made our own API (insert.php, add_new_customer.php) so our clients may insert new customers into our table using the demo application. We also created our own custom format (cpsc332-style) so our application will appear the same regardless of platform or screen size. 




Summary: Overall we were quite successful in our task of creating a database and demo application and believe the client will be quite pleased. In order to import our database our client must start mysql and apache from the xampp control panel. Next they must run the command 'mysql -u root -p RainyDayBank < RainyDayBankBackup.sql' from the proper directory in their terminal (the directory that rainydaybank_db_files is located in). Once completed the client must put our RainyDayBankWebsite folder in the htdocs directory (located in the xampp directory) and open a browser. All that is left is to navigate to our demo website http://localhost/RainyDayBank/index.php and they will be good to go. We hope our client is pleased and we look forward to working with the in the future.